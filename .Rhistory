source("correlation.R")
source("correlation.R")
corr ("specdata", 150)
source("correlation.R")
corr ("specdata", 150)
source("correlation.R")
source("correlation.R")
corr ("specdata", 150)
crfinal
cr
source("correlation.R")
corr ("specdata", 150)
source("correlation.R")
corr ("specdata", 150)
source("correlation.R")
corr ("specdata", 150)
source("correlation.R")
source("correlation.R")
corr ("specdata", 150)
dat <- read.csv(files_full[3])
correlation <- cor(dat$nitrate, dat$sulfate, use="complete.obs")
cr[1]=correlation
cr
source("correlation.R")
corr("specdata")
corr <- function(directory, threshold=0) {
## base info for reading in files
files_full <- list.files("specdata", full.names=TRUE)
use = NULL
for (i in 1:length(files)) {
dat <- read.csv(files_full[i])
if(sum(complete.cases(dat)) > threshold) {
use[i] = "files_full[i]" }
else {use[i]=NA}
}
}
use <- corr("specdata", 150)
corr <- function(directory, threshold=0) {
## base info for reading in files
files_full <- list.files("specdata", full.names=TRUE)
use = NULL
for (i in 1:length(files_full)) {
dat <- read.csv(files_full[i])
if(sum(complete.cases(dat)) > threshold) {
use[i] = "files_full[i]" }
else {use[i]=NA}
}
}''
corr <- function(directory, threshold=0) {
## base info for reading in files
files_full <- list.files("specdata", full.names=TRUE)
use = NULL
for (i in 1:length(files_full)) {
dat <- read.csv(files_full[i])
if(sum(complete.cases(dat)) > threshold) {
use[i] = "files_full[i]" }
else {use[i]=NA}
}
}
use <- corr("specdata", 150)
use
source("complete.R")
complete("specdata")
use <- final , nobs>150]
use <- final[ , nobs]>150]
use <- final[final[ , nobs]>150]
final
source("complete.R")
complete("specdata")
final
<- frame complete("specdata")
frame <- complete("specdata")
use <- frame[frame[ , nobs]>150]
use <- frame[frame[[nobs]>150]]
use <- frame[frame[[nobs>150]]
]
use <- subset(frame, [ , nobs] > 150)
use <- subset(frame, frame$nobs > 150)
use
use <- subset(frame,nobs > 150)
use
use <- subset(frame, "nobs" > 150)
use
use <- frame[frame$nobs > 150, ]
use
use <- frame[frame$nobs > 400, ]
use
use <- subset(frame, [ , nobs] > 800)
use <- subset(frame, [ , nobs] > 800]
use <- frame[frame$nobs > 800, ]
use
use <- frame[frame$nobs > 1000, ]
use
use <- frame[frame$nobs > 1000,]
usefull <- use[, id]
usefull <- use[, use$id]
usefull <- use[ ,use$id]
usefull <- use[ ,2]
usefull
usefull <- frame[frame$nobs > 1000, 2]
usefull
class usefull
class(usefull)
as.vector(usefull)
class(usefull)
source(corr2.R)
source(corr2.R)
source("corr2.R")
source("corr2.R")
source("corr2.R")
source("corr2.R")
source("corr2.R")
source("corr2.R")
source("corr2.R")
source("complete.R")
corr("specdata")
corr("specdata", 150)
source("corr2.R")
source("complete.R")
corr("specdata", 150)
sub
rame
frame
sub <- frame[frame$nobs>test, 2]
sub
sub <- frame[frame$nobs>150, 2]
sub
sub <- frame[frame$nobs>test, 2]
sub
sub <- frame[frame$nobs>test, 1]
sub
source("corr2.R")
source("complete.R")
corr("specdata", 150)
source("corr2.R")
corr("specdata", 150)
source("corr2.R")
corr("specdata", 150)
source("corr2.R")
corr("specdata", 150)
source("corr2.R")
corr("specdata", 150)
source("corr2.R")
corr("specdata", 150)
cr
sub
data <- read.csv(files_full[2])
data
files_full
sub
class(sub)
as.vector(sub)
sub
class(sub)
sub[2]
sub <-frame[frame$nobs>500, 1]
length(sub)
file
file <- read.csv(files_full[2])
na.omit(file)
source("corr2.R")
corr("specdata", 150)
cr
length(cr)
class(cr)
source("corr2.R")
corr("specdata", 150)
cr
source("corr2.R")
corr("specdata", 150)
cr
file <- read.csv(files_full(2))
file <- read.csv(files_full[2])
na.omit(file)
correlation <- cor(file$nitrate, file$sulfate)
correlation
na.omit(file)
correlation
correlation <- cor(file$nitrate, file$sulfate, use="complete.obs")
correlation
cr[2]=correlation
file <- read.csv(files_full[3])
correlation <- cor(file$nitrate, file$sulfate, use="complete.obs")
cr[3]=correlation
cr
source("corr2.R")
corr("specdata", 150)
cr
source("corr2.R")
source("corr2.R")
corr("specdata", 150)
cr
thresh
thresh<-frame[frame$nobs>500]
thresh<-frame[frame$nobs>500, ]
thresh
ids<-thresh$id
ids
class(ids)
idlist <- as.vector(ids)
class idlist
class(idlist)
thresh <-frame[frame$nobs>500, ]
ids <-thresh$id
ids
source("corr2.R")
source("corr2.R")
corr("specdata", 500)
cr2
source("corr2.R")
corr("specdata", 500)
cr2
ids
file
source("corr2.R")
corr("specdata", 500)
cr2
ids
head(file)
correlation <- cor(file$nitrate, file$sulfate, use="complete.obs")
correlation
file2 <-read.csv(files_full[ids[1]])
compare(file, file2)
?compare
??compare
head(file2)
file2<-read.csv(files_full[2])
head(file2)
source("corr2.R")
source("corr2.R")
source("corr2.R")
corr("specdata", 500)
source("corr2.R")
corr("specdata", 500)
source("corr2.R")
corr("specdata", 500)
cr2
source("corr2.R")
corr("specdata", 500)
cr2
source("corr2.R")
corr("specdata", 500)
cr2
cr2 = NULL
file <- read.csv(files_full[ids[1]])
correlation <- cor(file$nitrate, file$sulfate, use="complete.obs")
cr2[1] = correlation
cr2
file <- read.csv(files_full[ids[2]])
correlation <- cor(file$nitrate, file$sulfate, use="complete.obs")
cr2[2] = correlation
correlation
cr
cr2
source("corr2.R")
corr("specdata", 500)
cr <- corr("specdata", 150)
cr
head(cr)
submit()
submit()
submit()
submit()
file <- read.csv(files_full[ids[6]])
file
corr("specdata")
cr <- corr("specdata")
length(cr)
submit()
summary(cr)
ids
for (i in 1:length(ids)) {
file <- read.csv(files_full[ids[i]])
return ids[i]
for (i in 1:length(ids)) {
file <- read.csv(files_full[ids[i]])
ids[i]}
ids
thresh <- frame[frame$nobs>0, ]
ids <- thresh$id
file <- read.csv(files_full[ids[7]])
head(file)
submit()
submit()
??read.csv
?read.csv
class(ids)
length(ids)
file <- read.csv(files_full[ids[323]])
file <- read.csv(files_full[ids[324]])
file <- read.csv(files_full[ids[1]])
file <- read.csv(files_full[ids[0]])
ids
source("corr2.R")
cr <- corr("specdata", 5000)
cr <- corr("specdata", 5000)
source("corr2.R")
cr <- corr("specdata", 5000)
source("corr2.R")
cr <- corr("specdata", 5000)
?break
source("corr2.R")
cr <- corr("specdata", 5000)
?if
??
source("corr2.R")
cr <- corr("specdata", 5000)
thresh<-frame[frame$nobs>5000, ]
ids<-thresh$id
ids
length(ids)
cr <- corr("specdata", 500)
source("corr2.R")
cr <- corr("specdata", 5000)
cr
source("corr2.R")
cr <- corr("specdata", 5000)
ids
ids[0]
source("corr2.R")
cr <- corr("specdata", 5000)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a <- makeVector(c(1,2,3,4))
a$get()
a$getmean()
cachemean(a)
a$getmean()
cachemean(a)
a$set(c(10,20,30.40))
a$getmean()
cachemean(a)
a$set(c(10,20,30,40))
cachemean(a)
cachemean(a)
a$get
a
a$setmean(0)
a$getmean()
a$get
a$set(c(10,20,30,40))
a$getmean()
cachemean()
cachemean(a)
cachemean(a)
a$get
source ("cachematrix.R")
source("cachematrix.R")
setwd("C:\Users\Natalie\assignment2\ProgrammingAssignment2")
getwd()
setwd("C:/Users/Natalie/assignment2/ProgrammingAssignment2")
source("cachematrix.R")
source("cachematrix.R")
amatrix=makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
source("cachematrix.R")
amatrix=makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get
class(amatrix)
makeCacheMatrix
a <-makeVector(c(1,2,3,4))
a$getmean()
amatrix$get
a <-makeVector(c(1,2,3,4))
cachemean(a)
cachemean <- function(x) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a <-makeVector(c(1,2,3,4))
cachemean(a)
a$get
a
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a
a$get()
amatrix$get()
cacheSolve(amatrix)
amatrix$get
a$get
a$get()
amatrix$get()
cacheSolve(amatrix)
solve(amatrix$get())
source("cachematrix.R")
amatrix$get()
cacheSolve(amatrix)
matrix<-amatrix$get()
matrix
m<-solve(matrix, ...)
source("cachematrix.R")
m<-solve(matrix)
m
cacheSolve(amatrix)
m<-amatrix$getinverse()
source("cachematrix.R")
m<-amatrix$getinverse()
m<-solve(matrix)
m
x$setinverse(m)
amatrix$setinverse(m)
m
cacheSolve(amatrix)
if(!is.null(m) { message("getting cached data") return(m)}
if(!is.null(m)) { message("getting cached data") return(m)}
a <- makeVector(c(1,2,3,4))
a$get()
a$getmean()
cachemean(a)
a$getmean()
cachemean(a)
a$set(c(10,20,30,40))
a$getmean
a$getmean()
cachemean(a)
cachemean(a)
a$get()
a$setmean(0)
a$getmean()
a$get()
cachemean(a)
a<-makeVector(c(5, 25, 125, 625))
a$get()
cachemean(a)
cachemean(a)
m <- amatrix$getinverse()
amatrix
amatrix()
amatrix$get()
amatrix$setinverse()
?solve
list
get
get()
amatrix$get()
amatrix$setinverse()
setinverse <-function(solve)
m <<- solve
amatrix$setinverse()
x$setinverse(m)
amatrix$setinverse(m)
cacheSolve(amatrix)
m <- amatrix$getinverse()
amatrix=makeCacheMatrix(matrix(c(1,2,3,4)))
amatrix
amatrix$(get)
amatrix$get()
amatrix=makeCacheMatrix(matrix(c(1,2,3,4) nrow=2, ncol=2))
amatrix=makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
list
matrix <- x$get()
matrix <- amatrix$get()
m <- solve(matrix)
x$setinverse(m)
amatrix$setinverse(m)
m
m <- amatrix$getinverse
m
m <- amatrix$getinverse()
m
if(!is.null(m)) { message("getting cached data") return(m)}
if(!is.null(m)) { return(m)}
cacheSolve(amatrix)
source("cachematrix.R")
amatrix=makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverse()
